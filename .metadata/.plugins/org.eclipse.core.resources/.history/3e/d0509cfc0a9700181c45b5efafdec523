package gui;

import java.awt.List;
import java.awt.font.ImageGraphicAttribute;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;

import javax.imageio.ImageIO;;
public class GUIManager extends AbstractGUIManager{

	public void noEditSample() {
		BufferedImage image = sourceImages[0];
		BuffeeditedImage = image.getSubimage(0, 0, image.getWidth(), image.getHeight());
		}
	@Override
	public void editKaiten(int rot){
		// TODO 自動生成されたメソッド・スタブ
		BufferedImage image = sourceImages[0];
		convertArray conArray = new convertArray("E:\\homework\\color\\Lenna.bmp");

		try {
			int [] rgbArray = conArray.RunConvert();
			int [] editedArray = new int[rgbArray.length];

			if(rot % 4 == 0) {
				editedImage = image.getSubimage(0, 0, image.getWidth(), image.getHeight());
			}else if(rot % 3 == 0) {

					int w = 0;
					int x = 0;
					int y = 0;
						for (x = image.getWidth() -1 ; x > 0 ;x--) {
							for(y = 0; y < image.getHeight();y++) {
								editedArray[w] = rgbArray[x+y*image.getWidth()];
								w++;
							}
						}
						convertArray.resultImage(image, editedArray, editedImage);

			}
			else if (rot % 2 == 0) {

				int [] result_array = convertArray.rot_2(editedArray, image, rgbArray);

				convertArray.resultImage(image, editedArray, editedImage);

			}else if (rot == 1) {
					int [] rot1_editedArray = convertArray.rot_1(editedArray, image, rgbArray);
					convertArray.resultImage(image, editedArray, editedImage);
				}

		} catch (IOException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
		}


	}

	@Override
	public void editSyukusyo() {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public void editHanten(boolean reverseV, boolean reverseH) {
		// TODO 自動生成されたメソッド・スタブ


	}

}
